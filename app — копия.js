/** * Module dependencies. */var express = require('express');var mysql = require('mysql');var cookieParser = require('cookie-parser');var bodyParser = require('body-parser');var expressValidator = require('express-validator');//var Chart = require('chart.js');var app = express();// var routes = require('./routes');// var user = require('./routes/user');var http = require('http');var path = require('path');var jquery = require('jquery');var quantitys = [], prices = [], times = [], ids = [];var jsonArray;//////	Create connection to MySQL database server./// function getMySQLConnection() {    return mysql.createConnection({        host: "localhost",        user: "root",        password: "open!23",        database: "deltaarhiv"        // multipleStatements: true    });}////// Use pug as templating engine. Pug is reskud jade.///app.set('view engine', 'pug');app.get('/chartjs', function (req, res, next) {    res.render('chartjs.pug');});////// HTTP Method	: GET/// Endpoint 	: /delta/// /// To get collection of delta saved in MySQL database.///app.get('/delta', function (req, res, next) {    var deltaList = [];    // Connect to MySQL database.    var connection = getMySQLConnection();    connection.connect();    // Do the query to get data.    connection.query('SELECT DISTINCT sku FROM `delta`', function (err, rows, fields) {        if (err) {            res.status(500).json({"status_code": 500, "status_message": "internal server error"});        } else {            // Loop check on each row            for (var i = 0; i < rows.length; i++) {                // Create an object to save current row's data                var delta = {                    'sku': rows[i].sku,                    'quantity': rows[i].quantity,                    'price': rows[i].price,                    'time': rows[i].time,                    'id': rows[i].id                }                // Add object into array                deltaList.push(delta);            }            // Render index.pug page using array            res.render('index', {"deltaList": deltaList});        }    });    // Close the MySQL connection    connection.end();});app.get('/sklad', function (req, res, next) {    res.render('sklad');});////// HTTP Method	: GET/// Endpoint	: /delta/:id/// /// To get specific data of delta based on their identifier.///app.get('/delta/:sku', function (req, res, next) {    var skuArray = [];    var qList = [];    var skuList = [];    var timeList = [];    var priceList = [];    // Connect to MySQL database.    var connection = getMySQLConnection();    connection.connect();    // Do the query to get data.    connection.query('SELECT * FROM delta WHERE sku = ' + mysql.escape(req.params.sku.toString(16)) + ' LIMIT 10', function (err, rows, fields) {        console.log('SELECT * FROM delta WHERE sku = ' + mysql.escape(req.params.sku.toString(16)) + ' LIMIT 10');        if (err) {            res.status(500).json({"status_code": 500, "status_message": "internal server error"});        } else {            // Loop check on each row            for (var i = 0; i < rows.length; i++) {                // Create an object to save current row's data                var delta2 = {                    'sku': rows[i].sku,                    'quantity': rows[i].quantity,                    'price': rows[i].price,                    'time': rows[i].time,                    'id': rows[i].id                }                // Add objects into array.join('\n')                skuList.push(delta2);                skuArray.push(rows[i].sku);                qList.push(rows[i].quantity);                timeList.push(rows[i].time);                priceList.push(rows[i].price);                // Add object into array            }            var skuListJSON = JSON.stringify(skuList);            var qListJSON = JSON.stringify(qList);            var timeListJSON = JSON.stringify(timeList);            var priceListJSON = JSON.stringify(priceList);//console.log(skuList);            console.log(skuListJSON);//console.log(qListJSON);//console.log(timeListJSON);//console.log(priceListJSON);            // Render index.pug page using array            res.render('details', {                "skuList": skuList,                "qListJSON": qListJSON,                "timeListJSON": timeListJSON,                "priceListJSON": priceListJSON            });        }    });    // Close the MySQL connection    connection.end();});////// Start the app on port 300 /// The endpoint should be: /// List/Index 	: http://localhost:3000/delta/// Details 	: http://localhost:3000/delta/2/// https://codeforgeek.com/2015/01/render-html-file-expressjs////https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/routesapp.listen(3000, function () {    console.log('listening on port', 3000);});// catch 404 and forward to error handlerapp.use(function (req, res, next) {    var err = new Error('Not Found');    err.status = 404;    next(err);});// error handlerapp.use(function (err, req, res, next) {    // set locals, only providing error in development    res.locals.message = err.message;    res.locals.error = req.app.get('env') === 'development' ? err : {};    // render the error page    res.status(err.status || 500);    res.render('error');});app.use(bodyParser.json());app.use(bodyParser.urlencoded({extended: false}));app.use(expressValidator()); // Add this after the bodyParser middlewares!